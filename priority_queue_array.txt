class Prior{
    int data;
    int pri;
}
class Priorque{
    Prior[] a;
    int cap;
    int last;
    Priorque(int size)
    {
        a=new Prior[size];
        cap=size;
        last=0;
    }
    boolean isFull()
    {
        if(last==cap)
        {
            return true;
        }
        return false;
    }
   void enQueue(int data,int pri)
    {
        if(isFull())
        {
            System.out.print("Queue is Full");
            return;
        }
        a[last].data=data;
        a[last].pri=pri;
        last++;
    }
    boolean isEmpty()
    {
        if(last==0)
        {
            return true;
        }
        return false;
    }
     void deQueue()
    {
        if(isEmpty())
        {
            System.out.print("Queue is full");
            return;
        }
           int k=0;
            int maxp=Integer.MIN_VALUE;
        for(int i=0;i<last;i++)
        {
          
            if(maxp<a[i].pri)
            {
                maxp=a[i].pri;
                k=i;
            }
        }
            for(int i=k;i<last-1;i++)
            {
                a[i]=a[i+1];
            }
            last--;
        }
    
        void print()
        {
            for(int i=0;i<last;i++)
            {
                System.out.print("Data = "+a[i].data+" "+"priority= "+a[i].pri);
            }
        }
    public static void main(String[] args)
    {
        Priorque p =new Priorque(5);
        p.enQueue(10,4);
        p.enQueue(20,3);
        p.enQueue(30,2);
        p.enQueue(40,1);
        p.enQueue(50,5);
        p.print();
    }
        
    }
    
